use crate::grammar::parse::lexer::{
    Token,
    Token::Symbol,
};

pub(crate) fn expected() -> Vec<Token> {
    vec![
        Symbol("`".to_owned()),
        Symbol("~".to_owned()),
        Symbol("!".to_owned()),
        Symbol("@".to_owned()),
        Symbol("#".to_owned()),
        Symbol("$".to_owned()),
        Symbol("%".to_owned()),
        Symbol("^".to_owned()),
        Symbol("&".to_owned()),
        Symbol("*".to_owned()),
        Symbol("(".to_owned()),
        Symbol(")".to_owned()),
        Symbol("-".to_owned()),
        Symbol("+".to_owned()),
        Symbol("_".to_owned()),
        Symbol("=".to_owned()),
        Symbol("[".to_owned()),
        Symbol("]".to_owned()),
        Symbol("{".to_owned()),
        Symbol("}".to_owned()),
        Symbol("\\".to_owned()),
        Symbol("|".to_owned()),
        Symbol(";".to_owned()),
        Symbol(":".to_owned()),
        Symbol("'".to_owned()),
        Symbol("\"".to_owned()),
        Symbol(",".to_owned()),
        Symbol(".".to_owned()),
        Symbol("<".to_owned()),
        Symbol(">".to_owned()),
        Symbol("/".to_owned()),
        Symbol("?".to_owned()),
        Symbol("+=".to_owned()),
        Symbol("<=".to_owned()),
        Symbol("->".to_owned()),
        Symbol("===".to_owned()),
        Symbol("!==".to_owned()),
        Symbol("(".to_owned()),
        Symbol("(".to_owned()),
        Symbol(",".to_owned()),
        Symbol(")".to_owned()),
        Symbol("+".to_owned()),
        Symbol(",".to_owned()),
        Symbol("+".to_owned()),
        Symbol(":".to_owned()),
        Symbol("-".to_owned()),
    ]
}
